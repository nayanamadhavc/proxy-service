package com.flydubai.grpc;

import com.flydubai.HelloRequest;
import com.flydubai.HelloResponse;
import com.flydubai.Proxy;
import com.flydubai.hellosoap.HelloSoapResponse;
import com.flydubai.service.IGreetingMessage;
import io.grpc.Status;
import io.grpc.StatusRuntimeException;
import io.quarkus.grpc.GrpcService;
import io.smallrye.mutiny.Uni;
import jakarta.inject.Inject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This class represents a gRPC service acting as a proxy. Acts as the entry class.
 * It implements the Proxy interface auto-generated by the proto plugin for the proxy proto
 *
 * @author nayanamadhav
 */
@GrpcService
public class ProxyGrpcService implements Proxy {
    private static final Logger logger = LoggerFactory.getLogger(ProxyGrpcService.class);

    @Inject
    IGreetingMessage greetingService;

    /**
     * Retrieves a greeting message from a SOAP service and returns the grpc response.
     *
     * @param request The request containing the client's name.
     * @return A Uni returns the asynchronous operation containing hello response.
     */
    @Override
    public Uni<HelloResponse> getGreetingMessage(HelloRequest request) {
        // Step 1: Fetch the message
        HelloSoapResponse response = greetingService.getMessage(request);

        // Step 2: Transform the message
        HelloResponse transformedResponse = transformResponse(response);
        logger.info("Response from soap: {}", response.getResponse());

        // Step 3: Wrap the response with Uni
        return Uni.createFrom().item(() ->
                transformedResponse);
    }

    /**
     * Transforms a HelloSoapResponse object to a HelloResponse object.
     *
     * @param response The response from the SOAP service.
     * @return The transformed HelloResponse.
     */
    private HelloResponse transformResponse(HelloSoapResponse response) {
        HelloResponse transformedResponse = HelloResponse.newBuilder()
                .setGreetingMessage(response.getResponse())
                .build();

        return transformedResponse;
    }
}
